void printSubsetsRec(int arr[], int i, int sum, vector<int>& p) 
{ 
    
    if (i == 0 && sum != 0 && dp[0][sum]) 
    { 
        p.push_back(arr[i]); 
        display(p); 
        return; 
    } 
=5
   
    if (i == 0 && sum == 0) 
    { 
        display(p); 
        return; 
    } 
=3
    if (dp[i-1][sum]) 
    { 

        vector<int> b = p; 
        printSubsetsRec(arr, i-1, sum, b); 
    } 
=3 
  
    if (sum >= arr[i] && dp[i-1][sum-arr[i]]) 
    { 
        p.push_back(arr[i]); 
        printSubsetsRec(arr, i-1, sum-arr[i], p); 
    } 
=4	
} 

= 15
  
void printAllSubsets(int arr[], int n, int sum) 
{ 
    if (n == 0 || sum < 0) 
       return; 
=2
 
    dp = new bool*[n]; 
=1
    for (int i=0; i<n; ++i) 
    { 
        dp[i] = new bool[sum + 1]; 
        dp[i][0] = true; 
    } 
=1+(4n)
	
    if (arr[0] <= sum) 
       dp[0][arr[0]] = true; 
=2 

    for (int i = 1; i < n; ++i) 
        for (int j = 0; j < sum + 1; ++j) 
            dp[i][j] = (arr[i] <= j) ? dp[i-1][j] ||  dp[i-1][j-arr[i]] : dp[i - 1][j]; 
1+n*(1+n+n+n+n)
1+n*(1+4n)
= 1+n+4n²	

    if (dp[n-1][sum] == false) 
    { 
        printf("There are no subsets with sum %d\n", sum); 
        return; 
    } 
 =2

    vector<int> p; 
    printSubsetsRec(arr, n-1, sum, p); 
=2
} 
  
11+ (4n)+ n+ 4n²
  
  
int main() 
{ 
    int arr[] = {1, 2, 3, 4, 5}; 
	
    int n = sizeof(arr)/sizeof(arr[0]); 
	
    int sum = 10;
	
    printAllSubsets(arr, n, sum); 
=4
	
    return 0; 
} 


30+5n+4n²
O( (n^2) + n )